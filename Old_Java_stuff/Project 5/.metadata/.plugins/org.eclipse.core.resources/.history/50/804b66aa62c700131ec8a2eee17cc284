package com.example.animation;

import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Rect;

/**
 * Each instances of this class encapsulates a bitmaps that contains one or more
 * frames of an animation. Such bitmaps are commonly called "Sprite Sheets".
 * <p>
 * Each instance is created with geometric information sufficient to calculate
 * the rectangle enclosing each frame within the larger bitmap Sprite Sheet. Calling
 * <code>update</code> recalculates the current frame of the animation based on time,
 * and calling <code>draw</code> draws the current frame to an Android <code>Canvas</Code>.
 * 
 * <code>update</code> and <code>draw</code> should normally be called from a thread
 * other than the main thread so that time consumed drawing animations does not impede
 * application interactivity handled by the main thread.
 */
public class SpriteAnimated {
	
	//private static final String TAG = SpriteAnimated.class.getSimpleName();

	private Bitmap bitmap;		// the animation sequence
	private Rect sourceRect;	// the rectangle to be drawn from the animation bitmap
	private int frameNr;		// number of frames in animation
	private int currentFrame;	// the current frame
	private long frameTicker;	// the time of the last frame update
	private int framePeriod;	// milliseconds between each frame (1000/fps)
	private int startFrameNumber;
	private int framesPerRow;
	private int spriteWidth;	// the width of the sprite to calculate the cut out rectangle
	private int spriteHeight;	// the height of the sprite
	private boolean shouldReverse;
	private int x;				// the X coordinate of the object (top left of the output image)
	private int y;				// the Y coordinate of the object (top left of the output image)
	private int countBy;
	private int counter;
	
	/**
	 * Class constructor specifying the frame geometry of a bitmap. 
	 * 
	 * @param bitmap		A bitmap containing one or more frames of animation
	 * @param x				The x position on a <code>Canvas</code> where each fame is to be drawn.
	 * @param y				The y position on a <code>Canvas</code> where each fame is to be drawn.
	 * @param framesPerRow	The number of animation frames in each row of the bitmap. This is another
	 * 						way of saying "the number of columns".
	 * @param framesPerColumn	The number of animation frames in each column of the bitmap. This 
	 * 						is another way of saying "the number of rows".
	 * @param startFrameNumber	The index of the first frame in the animation. Indices are calculated 
	 * 						starting at 0 with the frame in the upper left corner of the bitmap and
	 * 						increasing indexes to the right and then down. The startFrameNumber must be 
	 * 						less than the product of <code>framesPerRow</code> times 
	 * 						<code>framesPerColumn</code>.
	 * @param fps			The number of frames of animation to draw per second. Regardless of the
	 * 						value of this parameter, animation rate is governed by overall screen
	 * 						rendering rate and the rate at which <code>update</code> and <code>draw</code> 
	 * 						are called.
	 * @param frameCount	The number of frames in the animation. The frameCount must be at least 1
	 * 						and less than the product of <code>framesPerRow</code> times 
	 * 						<code>framesPerColumn</code>.
	 * @param shouldReverse	If true, after the last frame of an animation is drawn, the current frame
	 * 						index is decremented by each call to <code>update</code>  until the current
	 * 						frame index returns to <code>startFrameNumber</code>. In other words, the
	 * 						animation reverses. If false, the animation starts over on 
	 * 						<code>startFrameNumber</code> each time the current frame index reaches
	 * 						<code>startFrameNumber</code> plus <code>frameCount</code>.
	 */
	public SpriteAnimated(Bitmap bitmap, 
			int x,
			int y, 
			int framesPerRow,
			int framesPerColumn,
			int startFrameNumber, 
			int fps, 
			int frameCount,
			boolean shouldReverse) {
		this.countBy = 1;
		this.bitmap = bitmap;
		this.x = x;
		this.y = y;
		this.currentFrame = 0;
		this.startFrameNumber = startFrameNumber;
		this.framesPerRow = framesPerRow;
		this.shouldReverse = shouldReverse;
		frameNr = frameCount;
		spriteWidth = bitmap.getWidth() / framesPerRow;
		spriteHeight = bitmap.getHeight() / framesPerColumn;
		sourceRect = new Rect(0, 0, spriteWidth, spriteHeight);
		framePeriod = 1000 / fps;
		frameTicker = 0l;
	}
	
	
	public Bitmap getBitmap() {
		return bitmap;
	}
	
	public void startFrame(int startFrame) {
		this.startFrameNumber = startFrame;
	}
	
	public void counterReset()
	{
		counter = 0;
	}
	
	public int count()
	{
		counter++;
		return counter;
	}
	
	public void setBitmap(Bitmap bitmap) {
		this.bitmap = bitmap;
	}
	
	public Rect getSourceRect() {
		return sourceRect;
	}
	
	public void setSourceRect(Rect sourceRect) {
		this.sourceRect = sourceRect;
	}
	
	public int getFrameNr() {
		return frameNr;
	}
	
	public void setFrameNr(int frameNr) {
		this.frameNr = frameNr;
	}
	
	public int getCurrentFrame() {
		return currentFrame;
	}
	
	public void setCurrentFrame(int currentFrame) {
		this.currentFrame = currentFrame;
	}
	
	public int getFramePeriod() {
		return framePeriod;
	}
	
	public void setFramePeriod(int framePeriod) {
		this.framePeriod = framePeriod;
	}
	
	public int getSpriteWidth() {
		return spriteWidth;
	}
	
	public void setSpriteWidth(int spriteWidth) {
		this.spriteWidth = spriteWidth;
	}
	
	public int getSpriteHeight() {
		return spriteHeight;
	}
	
	public void setSpriteHeight(int spriteHeight) {
		this.spriteHeight = spriteHeight;
	}
	
	public int getX() {
		return x;
	}
	
	public void setX(int x) {
		this.x = x;
	}
	
	public int getY() {
		return y;
	}
	
	public void setY(int y) {
		this.y = y;
	}
	
	/**
	 * Increment the current animation frame to iterate between <code>startFrameNumber</code> and
	 * <code>startFrameNumber</code> plus <code>frameCount</code>. See the description of 
	 * <code>shouldReverse</code> in the constructor documentation.
	 * 
	 * @param tickCount 	The number of milliseconds elapsed since January 1, 1970 00:00:00.0 UTC.
	 * 						The elapsed time and specified frames per second are used to determine 
	 * 						the frame number of the next animation frame to be drawn.
	 */
	public void update(long tickCount) {
		if (tickCount > frameTicker + framePeriod) {
			frameTicker = tickCount;
			// increment the frame
			currentFrame += this.countBy;
			if (currentFrame >= frameNr || 0 == currentFrame) {
				if(shouldReverse) {
					this.countBy *= -1;
					currentFrame = frameNr - 1;
				} else {
				   currentFrame = 0;
				}
			}
		}
		
		// define the rectangle to cut out sprite
		this.sourceRect.left = ((currentFrame + this.startFrameNumber) % this.framesPerRow) * spriteWidth;
		this.sourceRect.right = this.sourceRect.left + spriteWidth;
		this.sourceRect.top = ((currentFrame + this.startFrameNumber) / this.framesPerRow) * spriteHeight;
		this.sourceRect.bottom = this.sourceRect.top + spriteHeight;
	}
	
	/**
	 * Draw the current animation frame as determined by the last call to <code>update</code> on
	 * the <code>canvas</code> at the current X and Y position of the animation.
	 * 
	 * @param canvas 	The <code>Canvas</code> on which to draw.
	 */
	public void draw(Canvas canvas) {
		// where to draw the sprite
		Rect destRect = new Rect(getX(), getY(), getX() + spriteWidth, getY() + spriteHeight);
		canvas.drawBitmap(bitmap, sourceRect, destRect, null);
	}

}
